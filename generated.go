// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

// __queryFavAnimeInput is used internally by genqlient
type __queryFavAnimeInput struct {
	Uid int `json:"uid"`
}

// GetUid returns __queryFavAnimeInput.Uid, and is useful for accessing the field via an interface.
func (v *__queryFavAnimeInput) GetUid() int { return v.Uid }

// __queryFavCharaInput is used internally by genqlient
type __queryFavCharaInput struct {
	Uid int `json:"uid"`
}

// GetUid returns __queryFavCharaInput.Uid, and is useful for accessing the field via an interface.
func (v *__queryFavCharaInput) GetUid() int { return v.Uid }

// __queryFavMangaInput is used internally by genqlient
type __queryFavMangaInput struct {
	Uid int `json:"uid"`
}

// GetUid returns __queryFavMangaInput.Uid, and is useful for accessing the field via an interface.
func (v *__queryFavMangaInput) GetUid() int { return v.Uid }

// __queryRecentActvInput is used internally by genqlient
type __queryRecentActvInput struct {
	UserId            int `json:"userId"`
	CreatedAt_greater int `json:"createdAt_greater"`
}

// GetUserId returns __queryRecentActvInput.UserId, and is useful for accessing the field via an interface.
func (v *__queryRecentActvInput) GetUserId() int { return v.UserId }

// GetCreatedAt_greater returns __queryRecentActvInput.CreatedAt_greater, and is useful for accessing the field via an interface.
func (v *__queryRecentActvInput) GetCreatedAt_greater() int { return v.CreatedAt_greater }

// __queryUidInput is used internally by genqlient
type __queryUidInput struct {
	Name string `json:"name"`
}

// GetName returns __queryUidInput.Name, and is useful for accessing the field via an interface.
func (v *__queryUidInput) GetName() string { return v.Name }

// queryFavAnimeResponse is returned by queryFavAnime on success.
type queryFavAnimeResponse struct {
	// User query
	User queryFavAnimeUser `json:"User"`
}

// GetUser returns queryFavAnimeResponse.User, and is useful for accessing the field via an interface.
func (v *queryFavAnimeResponse) GetUser() queryFavAnimeUser { return v.User }

// queryFavAnimeUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user
type queryFavAnimeUser struct {
	// The id of the user
	Id int `json:"id"`
	// The users favourites
	Favourites queryFavAnimeUserFavourites `json:"favourites"`
}

// GetId returns queryFavAnimeUser.Id, and is useful for accessing the field via an interface.
func (v *queryFavAnimeUser) GetId() int { return v.Id }

// GetFavourites returns queryFavAnimeUser.Favourites, and is useful for accessing the field via an interface.
func (v *queryFavAnimeUser) GetFavourites() queryFavAnimeUserFavourites { return v.Favourites }

// queryFavAnimeUserFavourites includes the requested fields of the GraphQL type Favourites.
// The GraphQL type's documentation follows.
//
// User's favourite anime, manga, characters, staff & studios
type queryFavAnimeUserFavourites struct {
	// Favourite anime
	Anime queryFavAnimeUserFavouritesAnimeMediaConnection `json:"anime"`
}

// GetAnime returns queryFavAnimeUserFavourites.Anime, and is useful for accessing the field via an interface.
func (v *queryFavAnimeUserFavourites) GetAnime() queryFavAnimeUserFavouritesAnimeMediaConnection {
	return v.Anime
}

// queryFavAnimeUserFavouritesAnimeMediaConnection includes the requested fields of the GraphQL type MediaConnection.
type queryFavAnimeUserFavouritesAnimeMediaConnection struct {
	Nodes []queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMedia `json:"nodes"`
}

// GetNodes returns queryFavAnimeUserFavouritesAnimeMediaConnection.Nodes, and is useful for accessing the field via an interface.
func (v *queryFavAnimeUserFavouritesAnimeMediaConnection) GetNodes() []queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMedia {
	return v.Nodes
}

// queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMedia includes the requested fields of the GraphQL type Media.
// The GraphQL type's documentation follows.
//
// Anime or Manga
type queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMedia struct {
	// The id of the media
	Id int `json:"id"`
	// The official titles of the media in various languages
	Title queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMediaTitle `json:"title"`
	// The season year the media was initially released in
	SeasonYear int `json:"seasonYear"`
	// The cover images of the media
	CoverImage queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMediaCoverImage `json:"coverImage"`
	// The url for the media page on the AniList website
	SiteUrl string `json:"siteUrl"`
}

// GetId returns queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMedia.Id, and is useful for accessing the field via an interface.
func (v *queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMedia) GetId() int { return v.Id }

// GetTitle returns queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMedia.Title, and is useful for accessing the field via an interface.
func (v *queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMedia) GetTitle() queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMediaTitle {
	return v.Title
}

// GetSeasonYear returns queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMedia.SeasonYear, and is useful for accessing the field via an interface.
func (v *queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMedia) GetSeasonYear() int {
	return v.SeasonYear
}

// GetCoverImage returns queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMedia.CoverImage, and is useful for accessing the field via an interface.
func (v *queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMedia) GetCoverImage() queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMediaCoverImage {
	return v.CoverImage
}

// GetSiteUrl returns queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMedia.SiteUrl, and is useful for accessing the field via an interface.
func (v *queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMedia) GetSiteUrl() string {
	return v.SiteUrl
}

// queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMediaCoverImage includes the requested fields of the GraphQL type MediaCoverImage.
type queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMediaCoverImage struct {
	// The cover image url of the media at a large size
	Large string `json:"large"`
	// Average #hex color of cover image
	Color string `json:"color"`
}

// GetLarge returns queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMediaCoverImage.Large, and is useful for accessing the field via an interface.
func (v *queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMediaCoverImage) GetLarge() string {
	return v.Large
}

// GetColor returns queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMediaCoverImage.Color, and is useful for accessing the field via an interface.
func (v *queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMediaCoverImage) GetColor() string {
	return v.Color
}

// queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMediaTitle includes the requested fields of the GraphQL type MediaTitle.
// The GraphQL type's documentation follows.
//
// The official titles of the media in various languages
type queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMediaTitle struct {
	// The romanization of the native language title
	Romaji string `json:"romaji"`
}

// GetRomaji returns queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMediaTitle.Romaji, and is useful for accessing the field via an interface.
func (v *queryFavAnimeUserFavouritesAnimeMediaConnectionNodesMediaTitle) GetRomaji() string {
	return v.Romaji
}

// queryFavCharaResponse is returned by queryFavChara on success.
type queryFavCharaResponse struct {
	// User query
	User queryFavCharaUser `json:"User"`
}

// GetUser returns queryFavCharaResponse.User, and is useful for accessing the field via an interface.
func (v *queryFavCharaResponse) GetUser() queryFavCharaUser { return v.User }

// queryFavCharaUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user
type queryFavCharaUser struct {
	// The id of the user
	Id int `json:"id"`
	// The users favourites
	Favourites queryFavCharaUserFavourites `json:"favourites"`
}

// GetId returns queryFavCharaUser.Id, and is useful for accessing the field via an interface.
func (v *queryFavCharaUser) GetId() int { return v.Id }

// GetFavourites returns queryFavCharaUser.Favourites, and is useful for accessing the field via an interface.
func (v *queryFavCharaUser) GetFavourites() queryFavCharaUserFavourites { return v.Favourites }

// queryFavCharaUserFavourites includes the requested fields of the GraphQL type Favourites.
// The GraphQL type's documentation follows.
//
// User's favourite anime, manga, characters, staff & studios
type queryFavCharaUserFavourites struct {
	// Favourite characters
	Characters queryFavCharaUserFavouritesCharactersCharacterConnection `json:"characters"`
}

// GetCharacters returns queryFavCharaUserFavourites.Characters, and is useful for accessing the field via an interface.
func (v *queryFavCharaUserFavourites) GetCharacters() queryFavCharaUserFavouritesCharactersCharacterConnection {
	return v.Characters
}

// queryFavCharaUserFavouritesCharactersCharacterConnection includes the requested fields of the GraphQL type CharacterConnection.
type queryFavCharaUserFavouritesCharactersCharacterConnection struct {
	Nodes []queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacter `json:"nodes"`
}

// GetNodes returns queryFavCharaUserFavouritesCharactersCharacterConnection.Nodes, and is useful for accessing the field via an interface.
func (v *queryFavCharaUserFavouritesCharactersCharacterConnection) GetNodes() []queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacter {
	return v.Nodes
}

// queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacter includes the requested fields of the GraphQL type Character.
// The GraphQL type's documentation follows.
//
// A character that features in an anime or manga
type queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacter struct {
	// The id of the character
	Id int `json:"id"`
	// The names of the character
	Name queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacterName `json:"name"`
	// The character's gender. Usually Male, Female, or Non-binary but can be any string.
	Gender string `json:"gender"`
	// Character images
	Image queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacterImage `json:"image"`
	// The url for the character page on the AniList website
	SiteUrl string `json:"siteUrl"`
}

// GetId returns queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacter.Id, and is useful for accessing the field via an interface.
func (v *queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacter) GetId() int {
	return v.Id
}

// GetName returns queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacter.Name, and is useful for accessing the field via an interface.
func (v *queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacter) GetName() queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacterName {
	return v.Name
}

// GetGender returns queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacter.Gender, and is useful for accessing the field via an interface.
func (v *queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacter) GetGender() string {
	return v.Gender
}

// GetImage returns queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacter.Image, and is useful for accessing the field via an interface.
func (v *queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacter) GetImage() queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacterImage {
	return v.Image
}

// GetSiteUrl returns queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacter.SiteUrl, and is useful for accessing the field via an interface.
func (v *queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacter) GetSiteUrl() string {
	return v.SiteUrl
}

// queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacterImage includes the requested fields of the GraphQL type CharacterImage.
type queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacterImage struct {
	// The character's image of media at its largest size
	Large string `json:"large"`
}

// GetLarge returns queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacterImage.Large, and is useful for accessing the field via an interface.
func (v *queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacterImage) GetLarge() string {
	return v.Large
}

// queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacterName includes the requested fields of the GraphQL type CharacterName.
// The GraphQL type's documentation follows.
//
// The names of the character
type queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacterName struct {
	// The character's surname
	Last string `json:"last"`
	// The character's given name
	First string `json:"first"`
}

// GetLast returns queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacterName.Last, and is useful for accessing the field via an interface.
func (v *queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacterName) GetLast() string {
	return v.Last
}

// GetFirst returns queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacterName.First, and is useful for accessing the field via an interface.
func (v *queryFavCharaUserFavouritesCharactersCharacterConnectionNodesCharacterName) GetFirst() string {
	return v.First
}

// queryFavMangaResponse is returned by queryFavManga on success.
type queryFavMangaResponse struct {
	// User query
	User queryFavMangaUser `json:"User"`
}

// GetUser returns queryFavMangaResponse.User, and is useful for accessing the field via an interface.
func (v *queryFavMangaResponse) GetUser() queryFavMangaUser { return v.User }

// queryFavMangaUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user
type queryFavMangaUser struct {
	// The id of the user
	Id int `json:"id"`
	// The users favourites
	Favourites queryFavMangaUserFavourites `json:"favourites"`
}

// GetId returns queryFavMangaUser.Id, and is useful for accessing the field via an interface.
func (v *queryFavMangaUser) GetId() int { return v.Id }

// GetFavourites returns queryFavMangaUser.Favourites, and is useful for accessing the field via an interface.
func (v *queryFavMangaUser) GetFavourites() queryFavMangaUserFavourites { return v.Favourites }

// queryFavMangaUserFavourites includes the requested fields of the GraphQL type Favourites.
// The GraphQL type's documentation follows.
//
// User's favourite anime, manga, characters, staff & studios
type queryFavMangaUserFavourites struct {
	// Favourite manga
	Manga queryFavMangaUserFavouritesMangaMediaConnection `json:"manga"`
}

// GetManga returns queryFavMangaUserFavourites.Manga, and is useful for accessing the field via an interface.
func (v *queryFavMangaUserFavourites) GetManga() queryFavMangaUserFavouritesMangaMediaConnection {
	return v.Manga
}

// queryFavMangaUserFavouritesMangaMediaConnection includes the requested fields of the GraphQL type MediaConnection.
type queryFavMangaUserFavouritesMangaMediaConnection struct {
	Nodes []queryFavMangaUserFavouritesMangaMediaConnectionNodesMedia `json:"nodes"`
}

// GetNodes returns queryFavMangaUserFavouritesMangaMediaConnection.Nodes, and is useful for accessing the field via an interface.
func (v *queryFavMangaUserFavouritesMangaMediaConnection) GetNodes() []queryFavMangaUserFavouritesMangaMediaConnectionNodesMedia {
	return v.Nodes
}

// queryFavMangaUserFavouritesMangaMediaConnectionNodesMedia includes the requested fields of the GraphQL type Media.
// The GraphQL type's documentation follows.
//
// Anime or Manga
type queryFavMangaUserFavouritesMangaMediaConnectionNodesMedia struct {
	// The id of the media
	Id int `json:"id"`
	// The official titles of the media in various languages
	Title queryFavMangaUserFavouritesMangaMediaConnectionNodesMediaTitle `json:"title"`
	// The first official release date of the media
	StartDate queryFavMangaUserFavouritesMangaMediaConnectionNodesMediaStartDateFuzzyDate `json:"startDate"`
	// The cover images of the media
	CoverImage queryFavMangaUserFavouritesMangaMediaConnectionNodesMediaCoverImage `json:"coverImage"`
	// The url for the media page on the AniList website
	SiteUrl string `json:"siteUrl"`
}

// GetId returns queryFavMangaUserFavouritesMangaMediaConnectionNodesMedia.Id, and is useful for accessing the field via an interface.
func (v *queryFavMangaUserFavouritesMangaMediaConnectionNodesMedia) GetId() int { return v.Id }

// GetTitle returns queryFavMangaUserFavouritesMangaMediaConnectionNodesMedia.Title, and is useful for accessing the field via an interface.
func (v *queryFavMangaUserFavouritesMangaMediaConnectionNodesMedia) GetTitle() queryFavMangaUserFavouritesMangaMediaConnectionNodesMediaTitle {
	return v.Title
}

// GetStartDate returns queryFavMangaUserFavouritesMangaMediaConnectionNodesMedia.StartDate, and is useful for accessing the field via an interface.
func (v *queryFavMangaUserFavouritesMangaMediaConnectionNodesMedia) GetStartDate() queryFavMangaUserFavouritesMangaMediaConnectionNodesMediaStartDateFuzzyDate {
	return v.StartDate
}

// GetCoverImage returns queryFavMangaUserFavouritesMangaMediaConnectionNodesMedia.CoverImage, and is useful for accessing the field via an interface.
func (v *queryFavMangaUserFavouritesMangaMediaConnectionNodesMedia) GetCoverImage() queryFavMangaUserFavouritesMangaMediaConnectionNodesMediaCoverImage {
	return v.CoverImage
}

// GetSiteUrl returns queryFavMangaUserFavouritesMangaMediaConnectionNodesMedia.SiteUrl, and is useful for accessing the field via an interface.
func (v *queryFavMangaUserFavouritesMangaMediaConnectionNodesMedia) GetSiteUrl() string {
	return v.SiteUrl
}

// queryFavMangaUserFavouritesMangaMediaConnectionNodesMediaCoverImage includes the requested fields of the GraphQL type MediaCoverImage.
type queryFavMangaUserFavouritesMangaMediaConnectionNodesMediaCoverImage struct {
	// The cover image url of the media at a large size
	Large string `json:"large"`
	// Average #hex color of cover image
	Color string `json:"color"`
}

// GetLarge returns queryFavMangaUserFavouritesMangaMediaConnectionNodesMediaCoverImage.Large, and is useful for accessing the field via an interface.
func (v *queryFavMangaUserFavouritesMangaMediaConnectionNodesMediaCoverImage) GetLarge() string {
	return v.Large
}

// GetColor returns queryFavMangaUserFavouritesMangaMediaConnectionNodesMediaCoverImage.Color, and is useful for accessing the field via an interface.
func (v *queryFavMangaUserFavouritesMangaMediaConnectionNodesMediaCoverImage) GetColor() string {
	return v.Color
}

// queryFavMangaUserFavouritesMangaMediaConnectionNodesMediaStartDateFuzzyDate includes the requested fields of the GraphQL type FuzzyDate.
// The GraphQL type's documentation follows.
//
// Date object that allows for incomplete date values (fuzzy)
type queryFavMangaUserFavouritesMangaMediaConnectionNodesMediaStartDateFuzzyDate struct {
	// Numeric Year (2017)
	Year int `json:"year"`
}

// GetYear returns queryFavMangaUserFavouritesMangaMediaConnectionNodesMediaStartDateFuzzyDate.Year, and is useful for accessing the field via an interface.
func (v *queryFavMangaUserFavouritesMangaMediaConnectionNodesMediaStartDateFuzzyDate) GetYear() int {
	return v.Year
}

// queryFavMangaUserFavouritesMangaMediaConnectionNodesMediaTitle includes the requested fields of the GraphQL type MediaTitle.
// The GraphQL type's documentation follows.
//
// The official titles of the media in various languages
type queryFavMangaUserFavouritesMangaMediaConnectionNodesMediaTitle struct {
	// The romanization of the native language title
	Romaji string `json:"romaji"`
}

// GetRomaji returns queryFavMangaUserFavouritesMangaMediaConnectionNodesMediaTitle.Romaji, and is useful for accessing the field via an interface.
func (v *queryFavMangaUserFavouritesMangaMediaConnectionNodesMediaTitle) GetRomaji() string {
	return v.Romaji
}

// queryRecentActvPage includes the requested fields of the GraphQL type Page.
// The GraphQL type's documentation follows.
//
// Page of data
type queryRecentActvPage struct {
	Activities []queryRecentActvPageActivitiesActivityUnion `json:"-"`
}

// GetActivities returns queryRecentActvPage.Activities, and is useful for accessing the field via an interface.
func (v *queryRecentActvPage) GetActivities() []queryRecentActvPageActivitiesActivityUnion {
	return v.Activities
}

func (v *queryRecentActvPage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*queryRecentActvPage
		Activities []json.RawMessage `json:"activities"`
		graphql.NoUnmarshalJSON
	}
	firstPass.queryRecentActvPage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Activities
		src := firstPass.Activities
		*dst = make(
			[]queryRecentActvPageActivitiesActivityUnion,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalqueryRecentActvPageActivitiesActivityUnion(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal queryRecentActvPage.Activities: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalqueryRecentActvPage struct {
	Activities []json.RawMessage `json:"activities"`
}

func (v *queryRecentActvPage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *queryRecentActvPage) __premarshalJSON() (*__premarshalqueryRecentActvPage, error) {
	var retval __premarshalqueryRecentActvPage

	{

		dst := &retval.Activities
		src := v.Activities
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalqueryRecentActvPageActivitiesActivityUnion(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal queryRecentActvPage.Activities: %w", err)
			}
		}
	}
	return &retval, nil
}

// queryRecentActvPageActivitiesActivityUnion includes the requested fields of the GraphQL interface ActivityUnion.
//
// queryRecentActvPageActivitiesActivityUnion is implemented by the following types:
// queryRecentActvPageActivitiesListActivity
// queryRecentActvPageActivitiesMessageActivity
// queryRecentActvPageActivitiesTextActivity
// The GraphQL type's documentation follows.
//
// Activity union type
type queryRecentActvPageActivitiesActivityUnion interface {
	implementsGraphQLInterfacequeryRecentActvPageActivitiesActivityUnion()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *queryRecentActvPageActivitiesListActivity) implementsGraphQLInterfacequeryRecentActvPageActivitiesActivityUnion() {
}
func (v *queryRecentActvPageActivitiesMessageActivity) implementsGraphQLInterfacequeryRecentActvPageActivitiesActivityUnion() {
}
func (v *queryRecentActvPageActivitiesTextActivity) implementsGraphQLInterfacequeryRecentActvPageActivitiesActivityUnion() {
}

func __unmarshalqueryRecentActvPageActivitiesActivityUnion(b []byte, v *queryRecentActvPageActivitiesActivityUnion) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ListActivity":
		*v = new(queryRecentActvPageActivitiesListActivity)
		return json.Unmarshal(b, *v)
	case "MessageActivity":
		*v = new(queryRecentActvPageActivitiesMessageActivity)
		return json.Unmarshal(b, *v)
	case "TextActivity":
		*v = new(queryRecentActvPageActivitiesTextActivity)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ActivityUnion.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for queryRecentActvPageActivitiesActivityUnion: "%v"`, tn.TypeName)
	}
}

func __marshalqueryRecentActvPageActivitiesActivityUnion(v *queryRecentActvPageActivitiesActivityUnion) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *queryRecentActvPageActivitiesListActivity:
		typename = "ListActivity"

		result := struct {
			TypeName string `json:"__typename"`
			*queryRecentActvPageActivitiesListActivity
		}{typename, v}
		return json.Marshal(result)
	case *queryRecentActvPageActivitiesMessageActivity:
		typename = "MessageActivity"

		result := struct {
			TypeName string `json:"__typename"`
			*queryRecentActvPageActivitiesMessageActivity
		}{typename, v}
		return json.Marshal(result)
	case *queryRecentActvPageActivitiesTextActivity:
		typename = "TextActivity"

		result := struct {
			TypeName string `json:"__typename"`
			*queryRecentActvPageActivitiesTextActivity
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for queryRecentActvPageActivitiesActivityUnion: "%T"`, v)
	}
}

// queryRecentActvPageActivitiesListActivity includes the requested fields of the GraphQL type ListActivity.
// The GraphQL type's documentation follows.
//
// User list activity (anime & manga updates)
type queryRecentActvPageActivitiesListActivity struct {
	Typename string `json:"__typename"`
	// The id of the activity
	Id int `json:"id"`
	// The associated media to the activity update
	Media queryRecentActvPageActivitiesListActivityMedia `json:"media"`
	// The list progress made
	Progress string `json:"progress"`
	// The list item's textual status
	Status string `json:"status"`
	// The time the activity was created at
	CreatedAt int `json:"createdAt"`
	// The url for the activity page on the AniList website
	SiteUrl string `json:"siteUrl"`
}

// GetTypename returns queryRecentActvPageActivitiesListActivity.Typename, and is useful for accessing the field via an interface.
func (v *queryRecentActvPageActivitiesListActivity) GetTypename() string { return v.Typename }

// GetId returns queryRecentActvPageActivitiesListActivity.Id, and is useful for accessing the field via an interface.
func (v *queryRecentActvPageActivitiesListActivity) GetId() int { return v.Id }

// GetMedia returns queryRecentActvPageActivitiesListActivity.Media, and is useful for accessing the field via an interface.
func (v *queryRecentActvPageActivitiesListActivity) GetMedia() queryRecentActvPageActivitiesListActivityMedia {
	return v.Media
}

// GetProgress returns queryRecentActvPageActivitiesListActivity.Progress, and is useful for accessing the field via an interface.
func (v *queryRecentActvPageActivitiesListActivity) GetProgress() string { return v.Progress }

// GetStatus returns queryRecentActvPageActivitiesListActivity.Status, and is useful for accessing the field via an interface.
func (v *queryRecentActvPageActivitiesListActivity) GetStatus() string { return v.Status }

// GetCreatedAt returns queryRecentActvPageActivitiesListActivity.CreatedAt, and is useful for accessing the field via an interface.
func (v *queryRecentActvPageActivitiesListActivity) GetCreatedAt() int { return v.CreatedAt }

// GetSiteUrl returns queryRecentActvPageActivitiesListActivity.SiteUrl, and is useful for accessing the field via an interface.
func (v *queryRecentActvPageActivitiesListActivity) GetSiteUrl() string { return v.SiteUrl }

// queryRecentActvPageActivitiesListActivityMedia includes the requested fields of the GraphQL type Media.
// The GraphQL type's documentation follows.
//
// Anime or Manga
type queryRecentActvPageActivitiesListActivityMedia struct {
	// The official titles of the media in various languages
	Title queryRecentActvPageActivitiesListActivityMediaTitle `json:"title"`
}

// GetTitle returns queryRecentActvPageActivitiesListActivityMedia.Title, and is useful for accessing the field via an interface.
func (v *queryRecentActvPageActivitiesListActivityMedia) GetTitle() queryRecentActvPageActivitiesListActivityMediaTitle {
	return v.Title
}

// queryRecentActvPageActivitiesListActivityMediaTitle includes the requested fields of the GraphQL type MediaTitle.
// The GraphQL type's documentation follows.
//
// The official titles of the media in various languages
type queryRecentActvPageActivitiesListActivityMediaTitle struct {
	// The romanization of the native language title
	Romaji string `json:"romaji"`
}

// GetRomaji returns queryRecentActvPageActivitiesListActivityMediaTitle.Romaji, and is useful for accessing the field via an interface.
func (v *queryRecentActvPageActivitiesListActivityMediaTitle) GetRomaji() string { return v.Romaji }

// queryRecentActvPageActivitiesMessageActivity includes the requested fields of the GraphQL type MessageActivity.
// The GraphQL type's documentation follows.
//
// User message activity
type queryRecentActvPageActivitiesMessageActivity struct {
	Typename string `json:"__typename"`
}

// GetTypename returns queryRecentActvPageActivitiesMessageActivity.Typename, and is useful for accessing the field via an interface.
func (v *queryRecentActvPageActivitiesMessageActivity) GetTypename() string { return v.Typename }

// queryRecentActvPageActivitiesTextActivity includes the requested fields of the GraphQL type TextActivity.
// The GraphQL type's documentation follows.
//
// User text activity
type queryRecentActvPageActivitiesTextActivity struct {
	Typename string `json:"__typename"`
}

// GetTypename returns queryRecentActvPageActivitiesTextActivity.Typename, and is useful for accessing the field via an interface.
func (v *queryRecentActvPageActivitiesTextActivity) GetTypename() string { return v.Typename }

// queryRecentActvResponse is returned by queryRecentActv on success.
type queryRecentActvResponse struct {
	Page queryRecentActvPage `json:"Page"`
}

// GetPage returns queryRecentActvResponse.Page, and is useful for accessing the field via an interface.
func (v *queryRecentActvResponse) GetPage() queryRecentActvPage { return v.Page }

// queryUidResponse is returned by queryUid on success.
type queryUidResponse struct {
	// User query
	User queryUidUser `json:"User"`
}

// GetUser returns queryUidResponse.User, and is useful for accessing the field via an interface.
func (v *queryUidResponse) GetUser() queryUidUser { return v.User }

// queryUidUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user
type queryUidUser struct {
	// The id of the user
	Id int `json:"id"`
	// The name of the user
	Name string `json:"name"`
}

// GetId returns queryUidUser.Id, and is useful for accessing the field via an interface.
func (v *queryUidUser) GetId() int { return v.Id }

// GetName returns queryUidUser.Name, and is useful for accessing the field via an interface.
func (v *queryUidUser) GetName() string { return v.Name }

// The query or mutation executed by queryFavAnime.
const queryFavAnime_Operation = `
query queryFavAnime ($uid: Int) {
	User(id: $uid) {
		id
		favourites {
			anime {
				nodes {
					id
					title {
						romaji
					}
					seasonYear
					coverImage {
						large
						color
					}
					siteUrl
				}
			}
		}
	}
}
`

func queryFavAnime(
	ctx_ context.Context,
	client_ graphql.Client,
	uid int,
) (*queryFavAnimeResponse, error) {
	req_ := &graphql.Request{
		OpName: "queryFavAnime",
		Query:  queryFavAnime_Operation,
		Variables: &__queryFavAnimeInput{
			Uid: uid,
		},
	}
	var err_ error

	var data_ queryFavAnimeResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by queryFavChara.
const queryFavChara_Operation = `
query queryFavChara ($uid: Int) {
	User(id: $uid) {
		id
		favourites {
			characters {
				nodes {
					id
					name {
						last
						first
					}
					gender
					image {
						large
					}
					siteUrl
				}
			}
		}
	}
}
`

func queryFavChara(
	ctx_ context.Context,
	client_ graphql.Client,
	uid int,
) (*queryFavCharaResponse, error) {
	req_ := &graphql.Request{
		OpName: "queryFavChara",
		Query:  queryFavChara_Operation,
		Variables: &__queryFavCharaInput{
			Uid: uid,
		},
	}
	var err_ error

	var data_ queryFavCharaResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by queryFavManga.
const queryFavManga_Operation = `
query queryFavManga ($uid: Int) {
	User(id: $uid) {
		id
		favourites {
			manga {
				nodes {
					id
					title {
						romaji
					}
					startDate {
						year
					}
					coverImage {
						large
						color
					}
					siteUrl
				}
			}
		}
	}
}
`

func queryFavManga(
	ctx_ context.Context,
	client_ graphql.Client,
	uid int,
) (*queryFavMangaResponse, error) {
	req_ := &graphql.Request{
		OpName: "queryFavManga",
		Query:  queryFavManga_Operation,
		Variables: &__queryFavMangaInput{
			Uid: uid,
		},
	}
	var err_ error

	var data_ queryFavMangaResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by queryRecentActv.
const queryRecentActv_Operation = `
query queryRecentActv ($userId: Int, $createdAt_greater: Int) {
	Page(page: 1, perPage: 10) {
		activities(type_in: [MANGA_LIST,ANIME_LIST], userId: $userId, createdAt_greater: $createdAt_greater) {
			__typename
			... on ListActivity {
				id
				media {
					title {
						romaji
					}
				}
				progress
				status
				createdAt
				siteUrl
			}
		}
	}
}
`

func queryRecentActv(
	ctx_ context.Context,
	client_ graphql.Client,
	userId int,
	createdAt_greater int,
) (*queryRecentActvResponse, error) {
	req_ := &graphql.Request{
		OpName: "queryRecentActv",
		Query:  queryRecentActv_Operation,
		Variables: &__queryRecentActvInput{
			UserId:            userId,
			CreatedAt_greater: createdAt_greater,
		},
	}
	var err_ error

	var data_ queryRecentActvResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by queryUid.
const queryUid_Operation = `
query queryUid ($name: String!) {
	User(name: $name) {
		id
		name
	}
}
`

func queryUid(
	ctx_ context.Context,
	client_ graphql.Client,
	name string,
) (*queryUidResponse, error) {
	req_ := &graphql.Request{
		OpName: "queryUid",
		Query:  queryUid_Operation,
		Variables: &__queryUidInput{
			Name: name,
		},
	}
	var err_ error

	var data_ queryUidResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
